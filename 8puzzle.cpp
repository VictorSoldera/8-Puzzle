#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include <windows.h>
#include <conio.h>

// Funcao responsavel pelo funcionamento do jogo, muda as posicoes da matriz e checa erros.
void game(int Mat[][3])
{
    int i, j, n,m,flag=0,x,y,xm,ym,flag1=0;
    printf("\n\nDigite o movimento que quer fazer:\n");
    scanf("%d",&n);
    scanf("%d",&m);

    if(m != 0)
        printf("mova numeros apenas para o espaco vazio! (0)\n");

    else if(m == 0)
    {
        for(i=0; i<3; i++)
        {
            for(j=0; j<3; j++)
            {
                if(Mat[i][j] == n)
                {
                    x = i;
                    y = j;
                    flag = 1;
                }
            }
        }

        for(i=0; i<3; i++)
        {
            for(j=0; j<3; j++)
            {
                if(Mat[i][j] == m)
                {
                    xm = i;
                    ym = j;
                    flag1 = 1;
                }
            }
        }
    }
        else
            printf("digite apenas o numero 0 como segundo numero!\n");

        if(flag == 0)
            printf("Digite um numero presente no jogo!\n");
        else
        {
            if(Mat[x+1][y] == 0 && (x+1) < 3 )
            {
                Mat[xm][ym] = n;
                Mat[x][y] = 0;
                system("cls");
            }
            else if(Mat[x-1][y] == 0 && (x-1) != -1)
            {
                Mat[xm][ym] = n;
                Mat[x][y] = 0;
                system("cls");
            }
            else if(Mat[x][y+1] == 0 && (y+1) < 3)
            {
                Mat[xm][ym] = n;
                Mat[x][y] = 0;
                system("cls");
            }
            else if(Mat[x][y-1] == 0 && (y-1) != -1)
            {
                Mat[xm][ym] = n;
                Mat[x][y] = 0;
                system("cls");
            }
            else
                printf("Movimento errado! \n Pecas tem de estarem dos lados uma das outras.\n");
        }
}

//confere a resposta do jogador para ver se chegou ao final do jogo.
int resposta(int Mat[][3], int MatResp[][3])
{
    int i, j,cont=0;

    for(i=0; i<3; i++)
    {
        for(j=0; j<3; j++)
        {
            if(Mat[i][j] == MatResp[i][j])
            cont++;
        }
    }

        if(cont == 9)
        {
            printf("Parabens! voce ganhou o jogo!\n");
            return 9;
        }
        else
            return 0;

}

//Funcao responsavel para declaracao das matrizes, variaveis e chamadas de outras funcoes.
// as variaveis importantes sao as duas matrizes, matriz resposta e o cont, pois conta o looping do jogo
int main(void)
{
    int Mat[3][3],Mat2[3][3], MatResp[3][3],cont=0,i,j,x,y,z,w;

    //cria matriz do jogo 1
    Mat[0][0] = 7;
    Mat[0][1] = 2;
    Mat[0][2] = 4;
    Mat[1][0] = 5;
    Mat[1][1] = 6;
    Mat[1][2] = 0;
    Mat[2][0] = 8;
    Mat[2][1] = 3;
    Mat[2][2] = 1;

    //cria matriz do jogo 2
    Mat2[0][0] = 8;
    Mat2[0][1] = 6;
    Mat2[0][2] = 3;
    Mat2[1][0] = 4;
    Mat2[1][1] = 2;
    Mat2[1][2] = 5;
    Mat2[2][0] = 0;
    Mat2[2][1] = 1;
    Mat2[2][2] = 7;

    //cria matriz resposta
    MatResp[0][0] = 1;
    MatResp[0][1] = 2;
    MatResp[0][2] = 3;
    MatResp[1][0] = 4;
    MatResp[1][1] = 5;
    MatResp[1][2] = 6;
    MatResp[2][0] = 7;
    MatResp[2][1] = 0;
    MatResp[2][2] = 8;

    //menu
        printf("\t			\n         %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c", 201, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 187);
        printf("\t			\n         %c Quebra Cabeca 8   %c", 186, 186);
        printf("\t			\n         %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c", 204, 205, 205, 205, 203, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 185);
        printf("\t			\n         %c %d %c Jogar         %c", 186, 0, 186, 186);
        printf("\t			\n         %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c", 204, 205, 205, 205, 206, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 185);
        printf("\t			\n         %c %d %c Regras        %c", 186, 1,186, 186);
        printf("\t			\n         %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c", 204, 205, 205, 205, 206, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 185);
        printf("\t			\n         %c %d %c Sobre         %c", 186, 2,186, 186);
        printf("\t			\n         %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c", 204, 205, 205, 205, 206, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 185);
        printf("\t			\n         %c %d %c Sair          %c", 186, 3, 186, 186);
        printf("\t			\n         %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n\n\n\n\n\n", 200 , 205, 205, 205, 202, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 188);

        printf("Digite a opcao desejada: ");
        scanf("%d", &z);
        system("cls");

            if(z == 0)
            {
                printf("Qual jogo deseja jogar?\n\n");
                printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[0][0], Mat[0][1], Mat[0][2],Mat2[0][0], Mat2[0][1], Mat2[0][2]);
                printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                printf("\263 %d \263 %d \263   \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[1][0], Mat[1][1], Mat2[1][0], Mat2[1][1], Mat2[1][2]);
                printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                printf("\263 %d \263 %d \263 %d \263\t \t \263   \263 %d \263 %d \263\n",Mat[2][0], Mat[2][1], Mat[2][2], Mat2[2][1], Mat2[2][2]);
                printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");

                printf("\nSe deseja jogar a primeira, aperte 1, se for a segunda, aperte 2:\n");
                scanf("%d",&w);
                system("cls");

                if(w == 1)
                {
                    do
                    {
                        printf("\n\n");

                        //fileira 1
                        if(Mat[0][0] == 0)
                        {
                            printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                            printf("\263   \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n", Mat[0][1], Mat[0][2],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[1][0], Mat[1][1], Mat[1][2],MatResp[1][0], MatResp[1][1], MatResp[1][2]);
                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263   \263\n",Mat[2][0], Mat[2][1], Mat[2][2],MatResp[2][0], MatResp[2][2], MatResp[2][1]);
                            printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                        }
                        else if(Mat[0][1] == 0)
                        {
                            printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                            printf("\263 %d \263   \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[0][0], Mat[0][2],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[1][0], Mat[1][1], Mat[1][2],MatResp[1][0], MatResp[1][1], MatResp[1][2]);
                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263   \263 %d \263\n",Mat[2][0], Mat[2][1], Mat[2][2],MatResp[2][0], MatResp[2][2]);
                            printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                        }
                        else if(Mat[0][2] == 0)
                        {
                            printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                            printf("\263 %d \263 %d \263   \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[0][0], Mat[0][1],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[1][0], Mat[1][1], Mat[1][2],MatResp[1][0], MatResp[1][1], MatResp[1][2]);
                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263   \263 %d \263\n",Mat[2][0], Mat[2][1], Mat[2][2],MatResp[2][0], MatResp[2][2]);
                            printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                        }

                        //fileira 2
                        if(Mat[1][0] == 0)
                        {
                            printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[0][0], Mat[0][1], Mat[0][2],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");

                            printf("\263   \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n", Mat[1][1], Mat[1][2],MatResp[1][0], MatResp[1][1], MatResp[1][2]);

                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263   \263 %d \263\n",Mat[2][0], Mat[2][1], Mat[2][2],MatResp[2][0], MatResp[2][2]);
                            printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                        }
                        else if(Mat[1][1] == 0)
                        {
                            printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[0][0], Mat[0][1], Mat[0][2],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");

                            printf("\263 %d \263   \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[1][0], Mat[1][2],MatResp[1][0], MatResp[1][1], MatResp[1][2]);

                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263   \263 %d \263\n",Mat[2][0], Mat[2][1], Mat[2][2],MatResp[2][0], MatResp[2][2]);
                            printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                        }
                        else if(Mat[1][2] == 0)
                        {
                            printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[0][0], Mat[0][1], Mat[0][2],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");

                            printf("\263 %d \263 %d \263   \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[1][0], Mat[1][1],MatResp[1][0], MatResp[1][1], MatResp[1][2]);

                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263   \263 %d \263\n",Mat[2][0], Mat[2][1], Mat[2][2],MatResp[2][0], MatResp[2][2]);
                            printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                        }

                        //fileira 3
                        if(Mat[2][0] == 0)
                        {
                            printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[0][0], Mat[0][1], Mat[0][2],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[1][0], Mat[1][1], Mat[1][2],MatResp[1][0], MatResp[1][1], MatResp[1][2]);
                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");

                            printf("\263   \263 %d \263 %d \263\t \t \263 %d \263   \263 %d \263\n", Mat[2][1], Mat[2][2],MatResp[2][0], MatResp[2][2]);

                            printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                        }
                        else if(Mat[2][1] == 0)
                        {
                            printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[0][0], Mat[0][1], Mat[0][2],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[1][0], Mat[1][1], Mat[1][2],MatResp[1][0], MatResp[1][1], MatResp[1][2]);
                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");

                            printf("\263 %d \263   \263 %d \263\t \t \263 %d \263   \263 %d \263\n",Mat[2][0], Mat[2][2],MatResp[2][0], MatResp[2][2]);

                            printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                        }
                        else if(Mat[2][2] == 0)
                        {
                            printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[0][0], Mat[0][1], Mat[0][2],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                            printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat[1][0], Mat[1][1], Mat[1][2],MatResp[1][0], MatResp[1][1], MatResp[1][2]);
                            printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");

                            printf("\263 %d \263 %d \263   \263\t \t \263 %d \263   \263 %d \263\n",Mat[2][0], Mat[2][1], MatResp[2][0], MatResp[2][2]);

                            printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                        }
                        game(Mat);
                        cont = resposta(Mat,MatResp);
                    }
                    while(cont != 9);
                }

            else if (w == 2)
            {
                do
                {
                    printf("\n\n");

                    //fileira 1
                    if(Mat2[0][0] == 0)
                    {
                        printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                        printf("\263   \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n", Mat2[0][1], Mat2[0][2],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat2[1][0], Mat2[1][1], Mat2[1][2],MatResp[1][0], MatResp[1][1], MatResp[1][2]);
                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263   \263\n",Mat2[2][0], Mat2[2][1], Mat2[2][2],MatResp[2][0], MatResp[2][2], MatResp[2][1]);
                        printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                    }
                    else if(Mat2[0][1] == 0)
                    {
                        printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                        printf("\263 %d \263   \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat2[0][0], Mat2[0][2],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat2[1][0], Mat2[1][1], Mat2[1][2],MatResp[1][0], MatResp[1][1], MatResp[1][2]);
                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263   \263 %d \263\n",Mat2[2][0], Mat2[2][1], Mat2[2][2],MatResp[2][0], MatResp[2][2]);
                        printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                    }
                    else if(Mat2[0][2] == 0)
                    {
                        printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                        printf("\263 %d \263 %d \263   \263\t \t \263 %d \263 %d \263 %d \263\n",Mat2[0][0], Mat2[0][1],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat2[1][0], Mat2[1][1], Mat2[1][2],MatResp[1][0], MatResp[1][1], MatResp[1][2]);
                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263   \263 %d \263\n",Mat2[2][0], Mat2[2][1], Mat2[2][2],MatResp[2][0], MatResp[2][2]);
                        printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                    }

                    //fileira 2
                    if(Mat2[1][0] == 0)
                    {
                        printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat2[0][0], Mat2[0][1], Mat2[0][2],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");

                        printf("\263   \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n", Mat2[1][1], Mat2[1][2], MatResp[1][0], MatResp[1][1], MatResp[1][2]);

                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263   \263 %d \263\n",Mat2[2][0], Mat2[2][1], Mat2[2][2],MatResp[2][0], MatResp[2][2]);
                        printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                    }
                    else if(Mat2[1][1] == 0)
                    {
                        printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat2[0][0], Mat2[0][1], Mat2[0][2],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");

                        printf("\263 %d \263   \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat2[1][0], Mat2[1][2],MatResp[1][0], MatResp[1][1], MatResp[1][2]);

                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263   \263 %d \263\n",Mat2[2][0], Mat2[2][1], Mat2[2][2],MatResp[2][0], MatResp[2][2]);
                        printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                    }
                    else if(Mat2[1][2] == 0)
                    {
                        printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat2[0][0], Mat2[0][1], Mat2[0][2],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");

                        printf("\263 %d \263 %d \263   \263\t \t \263 %d \263 %d \263 %d \263\n",Mat2[1][0], Mat2[1][1],MatResp[1][0], MatResp[1][1], MatResp[1][2]);

                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263   \263 %d \263\n",Mat2[2][0], Mat2[2][1], Mat2[2][2],MatResp[2][0], MatResp[2][2]);
                        printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                    }

                    //fileira 3
                    if(Mat2[2][0] == 0)
                    {
                        printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat2[0][0], Mat2[0][1], Mat2[0][2],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat2[1][0], Mat2[1][1], Mat2[1][2],MatResp[1][0], MatResp[1][1], MatResp[1][2]);
                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");

                        printf("\263   \263 %d \263 %d \263\t \t \263 %d \263   \263 %d \263\n", Mat2[2][1], Mat2[2][2],MatResp[2][0], MatResp[2][2]);

                        printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                    }
                    else if(Mat2[2][1] == 0)
                    {
                        printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat2[0][0], Mat2[0][1], Mat2[0][2],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat2[1][0], Mat2[1][1], Mat2[1][2],MatResp[1][0], MatResp[1][1], MatResp[1][2]);
                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");

                        printf("\263 %d \263   \263 %d \263\t \t \263 %d \263   \263 %d \263\n",Mat2[2][0], Mat2[2][2],MatResp[2][0], MatResp[2][2]);

                        printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                    }
                    else if(Mat2[2][2] == 0)
                    {
                        printf("\332\304\304\304\302\304\304\304\302\304\304\304\277\t \t \332\304\304\304\302\304\304\304\302\304\304\304\277\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat2[0][0], Mat2[0][1], Mat2[0][2],MatResp[0][0], MatResp[0][1], MatResp[0][2]);
                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");
                        printf("\263 %d \263 %d \263 %d \263\t \t \263 %d \263 %d \263 %d \263\n",Mat2[1][0], Mat2[1][1], Mat2[1][2],MatResp[1][0], MatResp[1][1], MatResp[1][2]);
                        printf("\303\304\304\304\305\304\304\304\305\304\304\304\264\t \t \303\304\304\304\305\304\304\304\305\304\304\304\264\n");

                        printf("\263 %d \263 %d \263   \263\t \t \263 %d \263   \263 %d \263\n", Mat2[2][0], Mat2[2][1], MatResp[2][0], MatResp[2][2]);

                        printf("\300\304\304\304\301\304\304\304\301\304\304\304\331\t \t \300\304\304\304\301\304\304\304\301\304\304\304\331\n");
                    }
                    game(Mat2);
                    cont = resposta(Mat2,MatResp);
                }
                while(cont != 9);
            }
            main();
        }


            if(z == 1) {
                system("cls");
                printf("Nao eh permitido numeros nas diagonais de espaco em branco, ou numeros nao existentes no jogo\n");
                printf("Para jogar, digite o numero que deseja mover para o espaco em branco e zero depois para representar\n o espaco em branco do jogo e aperte ENTER\n");

                main();

            }
            else if(z == 2) {
                system("cls");
                printf("Projeto criado para a parte pratica da Materia de APC-B da PUCC\n");
                printf("Criadores: \n");
                printf("Mariana Cordoba  - RA:17280595\n");
                printf("Victor Soldera   - RA: 18045674");

                main();
            }
            else if(z == 3)
                return 0;
}
